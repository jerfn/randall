The first thing I did was read through randall.c to get a general understanding of the structure and what each part of the code did.
I added some comments to help with my understanding.

I then read through the Makefile and got a general understanding of it, then proceeded to add a check rule that performs a simple
check to see if the length of the output of randall matches what is expected.

To start refactoring, I created options.c and options.h to handle command line arguments, currently of which only reading nbytes exists.
I moved the code that reads nbytes to options.c and options.h and edited the Makefile to update the compilation and linking. I also slightly 
edited randall.c to handle errors from reading nbytes.

I then refactored the hardware randomization code to rand64-hw.c and rand64-hw.h, adding headers to the new refactoring files and removing
some from randall.c. I then recompiled and linked using make and tested. The same process was done to refactor the software randomization 
to rand64-sw.c and rand64-sw.h.

I then refactored writebytes to output.c and output.h, again remaking and testing.

To start handling the new options, I added a while loop in main using getopt that parses options and sets 2 strings for input and output
respectively. I edited the output function to accept these string options (so it can decide what input and output options to use). Currently,
only the rdrand input option is implemented, as the other features will be implemented in the future. Additionally, options.c was updated to 
work with getopt and read nbytes after getopt has parsed all options.

Next, I implemented the /F option for input, adding functions in rand64-sw.h and rand64-sw.c to set a user specified file as the input for 
randomness. I then used the conditional I had in the handleoutput function in output.c to set the file when the -i /F is used, and added 
appropriate error handling. I then tested this new functionality and also make sure old functionality was not affected.